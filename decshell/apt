#! /usr/bin/env bash
#set -euo pipefail
. include "args"
# Public API
# apt.installed pkg [pkg...]
# apt.removed pkg [pkg...]

function apt.assert.exists() {
  args.assert.single "$@"
  local PACKAGE="$1"
  if [[ $(apt-cache showpkg "$PACKAGE" | wc -l) -lt 2 ]]; then
    # Really? Let's refresh and make sure
    apt.cache.update force
    if [[ $(apt-cache showpkg "$PACKAGE" | wc -l) -lt 2 ]]; then
      >&2 echo "Package '$PACKAGE' does not exist (according to apt-cache showpkg)"
      return 2
    fi
  fi
}
function apt.assert.installed() {
  args.assert.single "$@"
  local PACKAGE="$1"
  apt.assert.exists "$PACKAGE"
  if [[ $(dpkg-query --status "$PACKAGE" 2>/dev/null | grep "Status\b.*\binstall\b" | wc -l) == "0" ]]; then
    return 2
  fi
}
function apt.assert.removed() {
  ! apt.assert.installed "$@"
}
function apt.assert.key() {
  apt-key list | grep "$1" >/dev/null
}

function apt.what_provides() { # Useful but not sure what to do with it
  args.assert.single "$@"
  file=$(which "$1")
  dpkg -S "$file" | sed 's/:.*$//'
}
function apt.cache.assert.stale() { # uses a TTL of 24 hours
  return $(( $(date +%s) - $(stat -c %Y /var/cache/apt) < 24*60*60 ))
}
function apt.cache.update() {
  if apt.cache.assert.stale || [[ "$#" -ne 0 ]] && [[ "$1" == "force" ]]; then
    sudo apt-key update           # Update signing keys (to prevent errors)
    sudo apt-get update           # Update package cache
  fi
}
function apt.cache.clean() {
  sudo apt-get clean -y         # Empty the package cache to save disk space.
}
function apt.upgrade_all() {
  apt.cache.update
  sudo apt-get dist-upgrade -y  # Ensure all packages are at the latest version.
                                # dist-upgrade may remove packages to resolve conflicts but that's OK here
  sudo apt-get autoremove -y    # Remove old packages no longer needed
  sudo apt-get autoclean -y     # Remove deprecated archives from the package cache
}

function apt.has.key() {
  args.assert.single "$@"
  local KEY="$1"
  if ! apt.assert.key "$KEY" ; then
    if ! (set -x; apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv "$KEY") ; then
      apt.cache.update force
      (set -x; apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv "$KEY")
    fi
  fi
  apt.assert.key "$KEY"
}
function apt.is.installed() {
  if ! args.assert.single "$@" ; then
    apt.are.installed "$@"
    return
  fi
  local PACKAGE="$1"
  if ! apt.assert.installed "$PACKAGE" ; then
    if ! (set -x; apt-get install -y "$PACKAGE") ; then
      # If an error happens with apt-get install then update keys and cache and retry
      apt.cache.update force
      (set -x; apt-get install -y "$PACKAGE")
    fi
  fi
  apt.assert.installed "$PACKAGE"
}
function apt.is.removed() {
  if ! args.assert.single "$@" ; then
    apt.are.removed "$@"
    return
  fi
  local PACKAGE="$1"
  if ! apt.assert.removed "$PACKAGE" ; then
    sudo apt-get remove -y "$PACKAGE"
  fi
  apt.assert.removed "$PACKAGE"
}
function apt.are.installed() {
  for PACKAGE in "$@"; do
    apt.is.installed "$PACKAGE"
  done
}
function apt.are.removed() {
  for PACKAGE in "$@"; do
    apt.is.removed "$PACKAGE"
  done
}
function apt.unattended-upgrades.is.enabled() {
  apt.is.installed unattended-upgrades
  echo 'unattended-upgrades unattended-upgrades/enable_auto_updates boolean true' | sudo debconf-set-selections
  sudo dpkg-reconfigure unattended-upgrades -f noninteractive
}
function apt.unattended-upgrades.is.disabled() {
  if apt.assert.installed unattended-upgrades
  then
    echo 'unattended-upgrades unattended-upgrades/enable_auto_updates boolean false' | sudo debconf-set-selections
    sudo dpkg-reconfigure unattended-upgrades -f noninteractive
  fi
  apt.is.removed unattended-upgrades
}
